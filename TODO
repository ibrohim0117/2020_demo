1). Python
- python data types
int, str, bool, float,  s = 'salom'
list, tuple, dict, set  l = [1, 2, 3]   t = (1, 2)  d = {key:value} s = {1, 2, 3, 4, 4}

- mutable, immutable

- context manager(custom)

with open("main.txt", 'r') as f:
    f.read('salom')


😎😎😎😎😎😎😎😎
2)  - OOP (barcha concept lari bn)
   1. Obyekt (Object)
   2. Klass (Class)
   3. Inkapsulyatsiya (Encapsulation)
   4. Meros olish (Inheritance)
   5. Polimorfizm (Polymorphism)
   6. Abstraktsiya (Abstraction)

class Shaxs:

    def __init__(self, ism, familya, yosh):
        self.ism = ism
        self.familya = familya
        self.yosh = yosh

    def salom():
        return self.ism


class Inson(Shaxs):

    def salom():
        return self.yosh

shaxs1 = Shaxs('Mark', 'Alijonov', 43)
print(shaxs1.salom())


inson1 = Inson('K', 'N', 34)
print(inson1.salom())



😎😎😎😎😎😎😎😎😎
3)
-DB(To'liq sqlite3 va postgresql)

C reate
R ade
U pdate
D elate

CRETAE TABLE IF NOT EXISTS users(
    id INT,
    name VARCHAR(25)
)

INSERT INTO users(id, name) VALUES(1, 'Mark')

SELECT * from users

UPDATE users SET name='B' WHERE id=3

DELETE from users WHERE id=3




-nginx  nima? To'liq
-gunicorn nima? To'liq

😎😎😎😎😎😎😎😎😎😎😎😎😎😎
4)
backend
    - http method, status

1. GET
2. POST
3. PUT
4. PATCH
5. DELETE

200, 201, 400, 404, 500

    - caching1). Python
- python data types
int, str, bool, float,  s = 'salom'
list, tuple, dict, set  l = [1, 2, 3]   t = (1, 2)  d = {key:value} s = {1, 2, 3, 4, 4}

- mutable, immutable

- context manager(custom)

with open("main.txt", 'r') as f:
    f.read('salom')


😎😎😎😎😎😎😎😎
2)  - OOP (barcha concept lari bn)
   1. Obyekt (Object)
   2. Klass (Class)
   3. Inkapsulyatsiya (Encapsulation)
   4. Meros olish (Inheritance)
   5. Polimorfizm (Polymorphism)
   6. Abstraktsiya (Abstraction)

class Shaxs:

    def __init__(self, ism, familya, yosh):
        self.ism = ism
        self.familya = familya
        self.yosh = yosh

    def salom():
        return self.ism


class Inson(Shaxs):

    def salom():
        return self.yosh

shaxs1 = Shaxs('Mark', 'Alijonov', 43)
print(shaxs1.salom())


inson1 = Inson('K', 'N', 34)
print(inson1.salom())



😎😎😎😎😎😎😎😎😎
3)
-DB(To'liq sqlite3 va postgresql)

C reate
R ade
U pdate
D elate

CRETAE TABLE IF NOT EXISTS users(
    id INT,
    name VARCHAR(25)
)

INSERT INTO users(id, name) VALUES(1, 'Mark')

SELECT * from users

UPDATE users SET name='B' WHERE id=3

DELETE from users WHERE id=3




-nginx  nima? To'liq
-gunicorn nima? To'liq

😎😎😎😎😎😎😎😎😎😎😎😎😎😎
4)
backend
    - http method, status

1. GET
2. POST
3. PUT
4. PATCH
5. DELETE

200, 201, 400, 404, 500

    - caching
😎😎😎😎😎😎😎😎😎😎😎
5)
django

    - function & class based views

    def index(request):
        return render(request, 'index.html')

    class IndexView(View):
        def get(request):
            return render(request, 'index.html')


    - generic views

   DJANGO              DRF
   TemplateView
   CreateView           CreateApiView
   ListView             ListApiView
   DetailView           RetriveApiView
   DeleteView           DestroyApiView

    - type of response
    - django orm, Q, F, When ....
    - model class meta
    - modelfields
    - forms
    - permissions
    - manager
    - queryset
    - migrations
    - django commands (custom)
    - prefetch_related, select_related
    - bir nechta db ulash (foydalanish)
    - optimize qilish

    custom qilish
    - adminka
    - middleware
    - context processor
    - template tags
    - custom pagination, filter
    - validation
    - user
😎😎😎😎😎😎😎😎😎😎😎
5)
django

    - function & class based views
    - generic views
    - type of response
    - django orm, Q, F, When ....
    - model class meta
    - modelfields
    - forms
    - permissions
    - manager
    - queryset
    - migrations
    - django commands (custom)
    - prefetch_related, select_related
    - bir nechta db ulash (foydalanish)
    - optimize qilish

    custom qilish
    - adminka
    - middleware
    - context processor
    - template tags
    - custom pagination, filter
    - validation
    - user